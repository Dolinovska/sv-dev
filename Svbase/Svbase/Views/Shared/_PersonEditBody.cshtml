@model Svbase.Core.Models.PersonAndFullAddressViewModel
<div class="body-content">
    @using (Html.BeginForm("Edit", "Person", method: FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Id)
        <div class="row">
            <div class="col-md-12">
                <div class="col-md-6">
                    <h4>Створити персону</h4>
                </div>
                <div class="col-md-6">
                    <button class="btn btn-primary pull-right" type="submit">
                        <a class="white-color" id="submitPersonEdit">Зберегти</a>
                    </button>
                </div>
            </div>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-md-12 margin-top">
                <div class="col-md-9 ignore-padding">
                    <div class="col-md-12 block-container">
                        <div class="col-md-4 ignore-padding">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "col-md-12" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4 ignore-padding">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "col-md-12" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4 ignore-padding">
                            @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "col-md-12" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 block-container">
                        <div class="col-md-4 ignore-padding">
                            @Html.LabelFor(model => model.FirstMobilePhone, htmlAttributes: new { @class = "col-md-12" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.FirstMobilePhone, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FirstMobilePhone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4 ignore-padding">
                            @Html.LabelFor(model => model.SecondMobilePhone, htmlAttributes: new { @class = "col-md-12" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.SecondMobilePhone, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.SecondMobilePhone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4 ignore-padding">
                            @Html.LabelFor(model => model.HomePhone, htmlAttributes: new { @class = "col-md-12" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.HomePhone, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.HomePhone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 block-container">
                        <div class="col-md-4 ignore-padding">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "col-md-12" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4 ignore-padding">
                            @Html.LabelFor(model => model.DateBirth, htmlAttributes: new { @class = "col-md-12" })
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.DateBirth, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DateBirth, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-4 ignore-padding">
                            @Html.LabelFor(model => model.IsDead, htmlAttributes: new { @class = "col-md-6" })
                            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "col-md-6" })
                            <div class="col-md-6">
                                @Html.RadioButtonFor(model => model.IsDead, "true", new { id = "dead", htmlAttributes = new { @class = "form-control col-md-2" } })
                                @Html.Label("dead", "так", new { htmlAttributes = new { @class = "col-md-4" } })
                                @Html.RadioButtonFor(model => model.IsDead, "false", new { id = "notDead", htmlAttributes = new { @class = "form-control col-md-2" } })
                                @Html.Label("notDead", "ні", new { htmlAttributes = new { @class = "col-md-4" } })
                            </div>
                            <div class="col-md-6">
                                @Html.RadioButtonFor(model => model.Gender, "true", new {id = "male", htmlAttributes = new {@class = "form-control col-md-2"}})
                                @Html.Label("male", "ч.", new {htmlAttributes = new {@class = "col-md-4"}})
                                @Html.RadioButtonFor(model => model.Gender, "false", new {id = "female", htmlAttributes = new {@class = "form-control col-md-2"}})
                                @Html.Label("female", "ж.", new {htmlAttributes = new {@class = "col-md-4"}})
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 block-container">
                        <div class="col-sm-6">
                            <div class="col-sm-12 ignore-padding">
                                <label for="editCities" style="width: 100% !important;">
                                    Місто
                                </label>
                                <select class="form-control" id="editCities" name="CityId"></select>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="col-sm-12 ignore-padding">
                                <label for="editStreets" style="width: 100% !important;">
                                    Вулиця
                                </label>
                                <select class="form-control" id="editStreets" name="StreetId"></select>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 block-container">
                        <div class="col-sm-6">
                            <div class="col-sm-12 ignore-padding">
                                <label for="editApartments" style="width: 100% !important;">
                                    Будинок
                                </label>
                                <select class="form-control" id="editApartments" name="ApartmentId"></select>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="col-sm-12 ignore-padding" id="flatIdForEdit" flatIdForEdit="@Model.FlatId">
                                <label for="editFlats" style="width: 100% !important;">
                                    Квартира
                                </label>
                                <select required class="form-control" id="editFlats" name="FlatId"></select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="col-md-12 ignore-padding margin-top-30">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <div class="row">
                                    <div class="col-md-12">
                                        Категорії
                                    </div>
                                </div>
                            </div>
                            <div class="panel-body">
                                <div class="row">
                                    <div class="col-md-12">
                                        @for (var i = 0; i < Model.Beneficiaries.Count(); i++)
                                        {
                                            <div class="row">
                                                <div class="col-md-2">
                                                    <div class="checkbox">
                                                        @Html.HiddenFor(model => model.Beneficiaries[i].Id)
                                                        @Html.HiddenFor(model => model.Beneficiaries[i].Name)
                                                        @Html.EditorFor(model => Model.Beneficiaries[i].IsChecked)
                                                        @Html.ValidationMessageFor(model => Model.Beneficiaries[i].IsChecked, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="col-xs-10 padding-top-7">@Model.Beneficiaries[i].Name</div>

                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<script>
    // new
    $(document).ready(() => {
        getAddressByFlatId();
        subscribeOnSelectCity();
        subscribeOnSelectStreet();
        subscribeOnSelectApartment();
    });

    var isAlreadyGetCities = false;
    var isAlreadyGetStreets = false;
    var isAlreadyGetAppartments = false;
    var isAlreadyGetFlats = false;


    $(document).on('click', '.modal-body #editCities', function () {
        if (!isAlreadyGetCities) {
            isAlreadyGetCities = true;
            getOptionSelectCityPartial();
            $(this).blur();
        }
    });

    $(document).on('click', '.modal-body #editStreets', function () {
        if (!isAlreadyGetStreets) {
            isAlreadyGetStreets = true;
            getStreetsPartial();
            $(this).blur();
        }
    });

    $(document).on('click', '.modal-body #editApartments', function () {
        if (!isAlreadyGetAppartments) {
            isAlreadyGetAppartments = true;
            getApartmentsPartial();
            $(this).blur();
        }
    });

    $(document).on('click', '.modal-body #editFlats', function () {
        if (!isAlreadyGetFlats) {
            isAlreadyGetFlats = true;
            getFlatsPartial();
            $(this).blur();
        }
    });

    function getAddressByFlatId() {
        $('#loader').fadeIn();

        var flatId = $('#flatIdForEdit')[0].getAttribute('flatIdForEdit');
        var urlAction = "@Url.Action("FindAddressByFlatId", "Flat")";
        $.ajax({
            url: urlAction,
            type: 'Get',
            traditional: true,
            data: { flatId: flatId },
            async: false
        }).done((data) => {
            $(".modal-body #editCities").html('<option selected value="' + data.city.Id + '">' + data.city.Name + '</option>');
            $(".modal-body #editStreets").html('<option selected value="' + data.street.Id + '">' + data.street.Name + '</option>');
            $(".modal-body #editApartments").html('<option selected value="' + data.apartment.Id + '">' + data.apartment.Name + '</option>');
            $(".modal-body #editFlats").html('<option selected value="' + data.flat.Id + '">' + data.flat.Name + '</option>');
        });
        $('#loader').fadeOut();
    }

    // old
    function subscribeOnSelectCity() {
        $(".modal-body #editCities").change(() => {
            getStreetsPartial();
        });
    }

    function getStreetsPartial() {
        $('#loader').fadeIn();

        var cityId = $(".modal-body #editCities").val();
        var urlAction = "@Url.Action("OptionSelectStreetsPartial", "Person")";
        getStreetsByCityId(urlAction, cityId);
        setDefaultApartment();
        setDefaultFlat();
        $('#loader').fadeOut();
    }

    function getStreetsByCityId(urlAction, cityId) {
        $('#loader').fadeIn();

        $.ajax({
            url: urlAction,
            type: 'Get',
            traditional: true,
            data: { cityId: cityId },
            async: false
        }).done((data) => {
            $(".modal-body #editStreets").html(data);
        });
        $('#loader').fadeOut();
    }

    function subscribeOnSelectStreet() {
        $(".modal-body #editStreets").change(() => {
            getApartmentsPartial();
            setDefaultFlat();
        });
    }

    function getApartmentsPartial() {
        var streetId = $(".modal-body #editStreets").val();
        var urlAction = "@Url.Action("OptionSelectApartmentPartial", "Person")";
        getApartmentByStreetId(urlAction, streetId);
        setDefaultFlat();
    }

    function getApartmentByStreetId(urlAction, streetId) {
        $('#loader').fadeIn();

        $.ajax({
            url: urlAction,
            type: 'Get',
            traditional: true,
            data: { streetId: streetId },
            async: false
        }).done((data) => {
            $(".modal-body #editApartments").html(data);
        });
        $('#loader').fadeOut();
    }

    function subscribeOnSelectApartment() {
        $(".modal-body #editApartments").change(() => {
            getFlatsPartial();
        });
    }

    function getFlatsPartial() {
        var apartmentId = $(".modal-body #editApartments").val();
        var urlAction = "@Url.Action("OptionSelectFlatPartial", "Person")";
        getFlatsByApartmentId(urlAction, apartmentId);
    }

    function getFlatsByApartmentId(urlAction, apartmentId) {
        $('#loader').fadeIn();

        $.ajax({
            url: urlAction,
            type: 'Get',
            traditional: true,
            data: { apartmentId: apartmentId },
            async: false
        }).done((data) => {
            $(".modal-body #editFlats").html(data);
        });
        $('#loader').fadeOut();
    }

    function getOptionSelectCityPartial() {
        $('#loader').fadeIn();

        var urlAction = "@Url.Action("OptionSelectCitiesPartial","Person")";
        $.ajax({
            url: urlAction,
            type: 'Get',
            traditional: true,
            data: {},
            async: false
        }).done((data) => {
            $(".modal-body #editCities").html(data);
            setDefaultStreet();
            setDefaultApartment();
            setDefaultFlat();
        });
        $('#loader').fadeOut();
    }

    function setDefaultStreet() {
        for (var i = 0; i < $(".modal-body #editCities option").length; i++) {
            if ($(".modal-body #editCities option")[i].hasAttribute('selected')) {
                var urlAction = "@Url.Action("OptionSelectDefaultStreetsPartial", "Person")";
                var cityId = $(".modal-body #editCities option")[i].getAttribute('value');
                getStreetsByCityId(urlAction, cityId);
                break;
            }
        }
    }

    function setDefaultApartment() {
        for (var j = 0; j < $(".modal-body #editStreets option").length; j++) {
            if ($(".modal-body #editStreets option")[j].hasAttribute('selected')) {
                var urlAction = "@Url.Action("OptionSelectDefaultApartmentPartial", "Person")";
                var streetId = $(".modal-body #editStreets option")[j].getAttribute('value');
                getApartmentByStreetId(urlAction, streetId);
                break;
            }
        }
    }

    function setDefaultFlat() {
        for (var k = 0; k < $(".modal-body #editApartments option").length; k++) {
            if ($(".modal-body #editApartments option")[k].hasAttribute('selected')) {
                var urlAction = "@Url.Action("OptionSelectDefaultFlatPartial", "Person")";
                var apartmentId = $(".modal-body #editApartments option")[k].getAttribute('value');
                getFlatsByApartmentId(urlAction, apartmentId);
                break;
            }
        }
    }
</script>
