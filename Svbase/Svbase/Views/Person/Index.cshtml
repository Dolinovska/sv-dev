@using Svbase.Core.Models
@model IEnumerable<PersonViewModel>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>Вибірка - </title>
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/metisMenu.min.css" rel="stylesheet" />
    <link href="~/Content/datatables/dataTables.bootstrap.css" rel="stylesheet" />
    <link href="~/Content/dataTables.responsive.css" rel="stylesheet" />
    <link href="~/Content/sb-admin-2.css" rel="stylesheet" />
</head>
<div id="wrapper">
    <nav role="navigation">
        <div class="navbar-default sidebar" role="navigation">
            <div class="sidebar-nav navbar-collapse">
                <ul class="nav" id="side-menu">
                    <li>
                        <div class="col-xs-12 ignore-padding">
                            <button id="getAll" style="width: 100%" type="button" class="btn btn-danger">Показати всі</button>
                        </div>
                    </li>
                    <li>
                        <div class="col-xs-12 ignore-padding">
                            <button id="search" style="width: 100%" type="button" class="btn btn-primary">Пошук</button>
                        </div>
                    </li>
                    <li>
                        <a id="districts-header"
                           class="main-filter-raw-header"
                           onclick="toggleInById('districts')">
                            <i class="fa fa-group fa-fw"></i>Округи
                        </a>
                        <ul id="districts" class="panel-collapse collapse nav nav-second-level">
                            @Html.Partial("_FilterCheckBoxPartial", new List<BaseViewModel>())
                        </ul>
                    </li>
                    <li>
                        <a id="cities-header"
                           class="main-filter-raw-header"
                           onclick="toggleInById('cities')">
                            <i class="fa fa-dashboard fa-fw"></i> Місто, район
                        </a>
                        <ul id="cities"
                            class="panel-collapse collapse nav nav-second-level"></ul>
                    </li>
                    <li>
                        <a id="street-header"
                           class="main-filter-raw-header"
                           onclick="toggleInById('streets')">
                            <i class="fa fa-bar-chart-o fa-fw"></i> Вулиця<span class="fa arrow"></span>
                        </a>
                        <ul id="streets" class="panel-collapse collapse nav nav-second-level"></ul>
                    </li>
                    <li>
                        <a class="main-filter-raw-header"
                           onclick="toggleInById('apartments')">
                            <i class="fa fa-table fa-fw"></i> Будинки
                        </a>
                        <ul id="apartments"
                            class="panel-collapse collapse nav nav-second-level"></ul>
                    </li>
                    <li>
                        <a class="main-filter-raw-header"
                           onclick="toggleInById('flats')">
                            <i class="fa fa-wrench fa-fw"></i> Номер квартири<span class="fa arrow"></span>
                        </a>
                        <ul id="flats"
                            class="panel-collapse collapse nav nav-second-level"></ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div id="page-wrapper">
        <div class="row">
            <div class="col-lg-12">
                <div class="col-md-6 ignore-padding">
                    <h2 class="page-header">Вибірка</h2>
                </div>
                <div class="col-md-6 ignore-padding">
                    <button class="btn btn-primary pull-right page-header">
                        <a class="white-color" href="@Url.Action("Create", "Person")">Додати людину</a>
                    </button>
                    <button id="export" class="btn btn-default pull-right page-header margin-right">
                        <a href="@Url.Action("Import", "Person")">Завантажити список</a>
                    </button>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="panel panel-default">
                    <div class="panel-body table-horizontal-scroll">
                        <table class="table table-striped table-bordered table-hover"
                               id="dataTables-example">
                            <thead>
                                <tr>
                                   
                                    <th id="lastNameHidden">Прізвище</th>
                                    <th>Ім'я</th>
                                    <th>По батькові</th>
                                    <th>Місто</th>
                                    <th>Вулиця</th>
                                    <th>Будинок</th>
                                    <th>Квартира</th>
                                    <th>Моб. тел. 1</th>
                                    <th>Моб. тел. 2</th>
                                    <th>Дом. тел.</th>
                                    <th>Категорія</th>
                                    <th>Емейл</th>
                                    @*<th>Позиція</th>*@
                                    @*<th>Партійний тип</th>*@
                                    <th>Дата<br> народження</th>
                                </tr>
                            </thead>
                            <tbody id="selectionBody">
                                @Html.Partial("SelectionPersonPartial", Model)
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@Html.Partial("_PersonEdit")

<script>
    $('[data-action="edit"]').click(function() {

        var id = $(this).data('itemId');
        $('#EditId').val(id);
        $('#personEditModal').modal();
    });

    $('[data-action="delete"]').click(function() {
        var that = this;
        var id = $(this).data('itemId');
        $.get('@Url.Action("Delete","Person")', { id })
            .done(() => {
                $(that).parent().parent().remove();
            });
    });

    function toggleInById(itemId) {
        $("#" + itemId).toggle('in');
    }

    $(document).ready(() => {
        subscribeEvents();
        getDistrictPartialView();
        getCitiesPartialView();
    });

    function subscribeEvents() {
        onClickSearch();
        onClickGetAll();
    }

    function onClickGetAll() {
        $("#getAll").click(() => {
            getAll();
        });
    }

    function getAll() {
        var urlAction = "@Url.Action("All")";
        $.ajax({
            url: urlAction,
            type: 'Get',
            data: {},
            async: false
        }).done((data) => {
            $("#selectionBody").html(data);
        });
    }

    function onClickSearch() {
        $("#search").click(() => {
            search();
        });
    }

    function getDistrictPartialView() {
        var urlAction = "@Url.Action("FilterDistricts")";
        $.ajax({
            url: urlAction,
            type: 'Get',
            data: {},
            async: false
        }).done((data) => {
            if (data) {
                $("#districts").html(data);
            }
        });
    }

    function search() {
        var urlAction = "@Url.Action("SearchPersonsByFilter")";
        var districtIds = getCheckedDistrictIds();
        var cityIds = getCheckedCityIds();
        var streetIds = getCheckedStreetIds();
        var apartmentIds = getCheckedApartmentIds();
        var flatIds = getCheckedFlatIds();

        var filter = {
            districtIds: districtIds,
            cityIds: cityIds,
            streetIds: streetIds,
            apartmentIds: apartmentIds,
            flatIds: flatIds
        };

        $.ajax({
            url: urlAction,
            type: 'Post',
            data: { filter: filter },
            async: false
        }).done((data) => {
            $("#selectionBody").html(data);
        });
    }

    function getCheckedDistrictIds() {
        var districtIds = [];
        $("#districts input:checked").each((index, element) => {
            if (!isNaN($(element).val())) {
                var id = Number($(element).val());
                districtIds.push(id);
            }
        });
        return districtIds;
    }

    function getCitiesPartialView() {
        var urlAction = "@Url.Action("FilterCities")";
        $.ajax({
            url: urlAction,
            type: 'Get',
            data: {},
            async: false
        }).done((data) => {
            if (data) {
                $("#cities").html(data);
            }
            subscribeOnClickCity();
        });
    }

    function subscribeOnClickCity() {
        $("#cities > li > a").click((event) => {
            var target = event.target;
            if (target instanceof HTMLInputElement) {
                var isChecked = $(target).prop("checked");
                var isHighlighted = $(target)
                    .parent().hasClass("highlighted-filter-item");
                if (isChecked && !isHighlighted) {
                    changeHighlightedStatus($(target).parent());
                    getStreets();
                } else {
                    checkStreetsByCheckedCities();
                }
            } else {
                changeHighlightedStatus(target);
                getStreets();
            }
        });
    }

    function getStreets() {
        var cityIds = getActiveCityIds();
        var filter = {
            cityIds: cityIds
        }
        getStreetsPartialViewByCityIds(filter);
    }


    function getActiveCityIds() {
        var cityIds = [];
        $("#cities").find(".highlighted-filter-item input").each((index, element) => {
            if (!isNaN($(element).val())) {
                var id = Number($(element).val());
                cityIds.push(id);
            }
        });
        return cityIds;
    }


    function getCheckedCityIds() {
        var cityIds = [];
        $("#cities input:checked").each((index, element) => {
            if (!isNaN($(element).val())) {
                var id = Number($(element).val());
                cityIds.push(id);
            }
        });
        return cityIds;
    }

    function getStreetsPartialViewByCityIds(filter) {
        var urlAction = "@Url.Action("FilterStreetsByCityIds")";
        $.ajax({
            url: urlAction,
            type: 'Get',
            traditional: true,
            data: filter,
            async: false
        }).done((data) => {
            $("#streets").html(data);
            checkStreetsByCheckedCities();
            subscribeOnClickStreet();
            getApartments();
        });
    }

    function getCheckedDistrictIds() {
        var districtIds = [];
        $("#districts input:checked").each((index, element) => {
            if (!isNaN($(element).val())) {
                var id = Number($(element).val());
                districtIds.push(id);
            }
        });
        return districtIds;
    }



    function getCheckedStreetIds() {
        var streetIds = [];
        $("#streets input:checked").each((index, element) => {
            if (!isNaN($(element).val())) {
                var id = Number($(element).val());
                streetIds.push(id);
            }
        });
        return streetIds;
    }

    function getCheckedApartmentIds() {
        var apartmentIds = [];
        $("#apartments input:checked").each((index, element) => {
            if (!isNaN($(element).val())) {
                var id = Number($(element).val());
                apartmentIds.push(id);
            }
        });
        return apartmentIds;
    }

    function getCheckedFlatIds() {
        var flatIds = [];
        $("#flats input:checked").each((index, element) => {
            if (!isNaN($(element).val())) {
                var id = Number($(element).val());
                flatIds.push(id);
            }
        });
        return flatIds;
    }

    function checkStreetsByCheckedCities() {
        uncheckAllStreets();
        var cityIds = getCheckedCityIds();
        if (!cityIds)
            return;
        cityIds.forEach((x) => {
            var target = $(".street_" + x + " input");
            $(target).prop("checked", true);
            if (!$(target).parent().hasClass("highlighted-filter-item")) {
                changeHighlightedStatus($(target).parent());
            }
            getApartments();
        });
    }

    function uncheckAllStreets() {
        $("#streets input").prop("checked", false);
    }

    function changeHighlightedStatus(target) {
        var active = $(target).hasClass("highlighted-filter-item");
        if (active) {
            $(target).removeClass("highlighted-filter-item");
            $(target).children().prop("checked", false);
        } else {
            $(target).addClass("highlighted-filter-item");
        }
    }

    function subscribeOnClickStreet() {
        $("#streets > li > a").click((event) => {
            var target = event.target;
            if (target instanceof HTMLInputElement) {
                var isChecked = $(target).prop("checked");
                var isHighlighted = $(target)
                    .parent().hasClass("highlighted-filter-item");
                if (isChecked && !isHighlighted) {
                    changeHighlightedStatus($(target).parent());
                    getApartments();
                } else {
                    checkApartmentsByCheckedStreets();
                }
            } else {
                changeHighlightedStatus(target);
                getApartments();
            }
        });
    }

    function getApartments() {
        var streetIds = getActiveStreetIds();
        var filter = {
            streetIds: streetIds
        }
        getApartmentsPartialViewByStreetIds(filter);
    }

    function getActiveStreetIds() {
        var streetIds = [];
        $("#streets").find(".highlighted-filter-item input").each((index, element) => {
            if (!isNaN($(element).val())) {
                var id = Number($(element).val());
                streetIds.push(id);
            }
        });
        return streetIds;
    }

    function getApartmentsPartialViewByStreetIds(filter) {
        var urlAction = "@Url.Action("FilterApartmentsByStreetIds")";
        $.ajax({
            url: urlAction,
            type: 'Get',
            traditional: true,
            data: filter,
            async: false
        }).done((data) => {
            $("#apartments").html(data);
            checkApartmentsByCheckedStreets();
            subscribeOnClickApartment();
        });
    }

    function checkApartmentsByCheckedStreets() {
        uncheckAllApartments();
        var streetIds = getCheckedStreetIds();
        if (!streetIds)
            return;
        streetIds.forEach((x) => {
            var target = $(".apartment_" + x + " input");
            $(target).prop("checked", true);
            if (!$(target).parent().hasClass("highlighted-filter-item")) {
                changeHighlightedStatus($(target).parent());
            }
        });
        getFlats();
    }

    function uncheckAllApartments() {
        $("#apartments input").prop("checked", false);
    }


    function subscribeOnClickApartment() {
        $("#apartments > li > a").click((event) => {
            var target = event.target;
            if (target instanceof HTMLInputElement) {
                var isChecked = $(target).prop("checked");
                var isHighlighted = $(target)
                    .parent().hasClass("highlighted-filter-item");
                if (isChecked && !isHighlighted) {
                    changeHighlightedStatus($(target).parent());
                    getFlats()
                } else {
                    checkFlatsByCheckedApartments();
                }
            } else {
                changeHighlightedStatus(target);
                getFlats()
            }
        });
    }

    function checkFlatsByCheckedApartments() {
        uncheckAllFlats();
        var apartmentIds = getCheckedApartmentIds();
        if (!apartmentIds)
            return;
        apartmentIds.forEach((x) => {
            $(".flat_" + x + " input").prop("checked", true);
        });
    }

    function uncheckAllFlats() {
        $("#flats input").prop("checked", false);
    }

    function getFlats() {
        var apartmentIds = getActiveApartmentIds();
        var filter = {
            apartmentIds: apartmentIds
        }
        getFlatsPartialViewByApartmentIds(filter);
    }


    function getActiveApartmentIds() {
        var apartmentIds = [];
        $("#apartments").find(".highlighted-filter-item input").each((index, element) => {
            if (!isNaN($(element).val())) {
                var id = Number($(element).val());
                apartmentIds.push(id);
            }
        });
        return apartmentIds;
    }

    function getFlatsPartialViewByApartmentIds(filter) {
        var urlAction = "@Url.Action("FilterFlatsByApartmentIds")";
        $.ajax({
            url: urlAction,
            type: 'Get',
            traditional: true,
            data: filter,
            async: false
        }).done((data) => {
            $("#flats").html(data);
            checkFlatsByCheckedApartments();
        });
    }

</script>